Implementazione di un microservice com.thoughtmechanix.simpleservice.Application 
dove al contrario spmia-chapter1, Application e' SOLO bootstrapper [@SpringBootApplication]
Controller e request mapper e' LicenseServiceController.java [@RestController,@RequestMapping]



###########   Application.java   #############

@SpringBootApplication  =>boostrap spring boot class

 This is a convenience annotation that is equivalent to declaring {@code @Configuration},
  {@code @EnableAutoConfiguration} and {@code @ComponentScan}.
Tell the Spring container that this class is the source of bean definitions for use in Spring. 
SpringApplication.run() call starts the Spring container and returns a Spring ApplicationContext object
 


###########  LicenseServiceController.java  ###########

Annotata @RestController che a sua volta annotata @Controller.Automaticamente  implementa JON seria/deserializzazione.
@RequestMapping(value="v1/organizations/{organizationId}/licenses") mappa tutte le requests verso
http://127.0.0.1:8080/v1/organizations/{organizationId}/licenses verso metodi LicenseServiceController

Poi quale metodo va invocato dipende dalle annotazioni :

 @RequestMapping(value="/{licenseId}",method = RequestMethod.GET)
 @RequestMapping(value="{licenseId}",method = RequestMethod.PUT)
 @RequestMapping(value="{licenseId}",method = RequestMethod.POST)
 @RequestMapping(value="{licenseId}",method = RequestMethod.DELETE)
 
Usa Postman in chrome per testing.

Il matching e' fatto in AbstractHandlerMethodMapping.getHandlerInternal()

La serializzazione (requestPost body json =>java object) avviene in:AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters()

La deserializzazione (response Java object=>Json) avviene in        AbstractMessageConverterMethodProcessor.writeWithMessageConverters()


##########  spring-boot-starter-actuator   #################

Fornisce i seguenti endpoints x monitoring:

http://127.0.0.1:8080/env
http://127.0.0.1:8080/metrics
http://127.0.0.1:8080/info
http://127.0.0.1:8080/mappings
http://127.0.0.1:8080/beans
http://127.0.0.1:8080/trace
http://127.0.0.1:8080/autoconfig
http://127.0.0.1:8080/configprops
http://127.0.0.1:8080/dump
http://127.0.0.1:8080/health


Se si rimuove spring-boot-starter-actuator dal pom, il service funziona ancora ma gli endpoint 
qui sopra scompaiono.

##########################       POM      ############################################

Rispetto a spmia-chapter1, spring-boot-starter-web esclude spring-boot-starter-tomcat ed include spring-boot-starter-jetty
per runnare microservice in jetty.

In piu si e' aggiunto  spring-boot-starter-actuator che espone endpoint come /env,/mappings,etc per troubleshooting


Quindi : mvn package => genera licensing-service-0.0.1-SNAPSHOT.jar

mvn spring-boot:run => lancia licensing-service  [ovviamente si puo lanciare anche con java -jar licensing-service-0.0.1-SNAPSHOT.jar]

mvn docker:build   => crea docker image pinopisello/tmx-licensing-service

lancia container col MS running   => docker run -p 8080:8080 --name spmia-chapter2_container pinopisello/tmx-licensing-service:chapter2  

Testare MS (GET.PUT,POST,DELETE):

http://127.0.0.1:8080/v1/organizations/{organizationId}/licenses/{licenseId}

Testare MS docker container:                       
http://192.168.99.100:8080/v1/organizations/{organizationId}/licenses/{licenseId}
                                   
            
                              










