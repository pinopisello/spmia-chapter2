<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.thoughtmechanix</groupId>
	<artifactId>licensing-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Eagle Eye Licensing Service</name>
	<description>Licensing Service</description>

	<!-- Importo il parent in modo che le dependencies abbiano stessa version del parent! -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
           <version>1.4.4.RELEASE</version>
		<relativePath />
	</parent>
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
			    <!-- escludi se vuoi usare spring-boot-starter-jetty invede di tomcat -->
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
				 
			</exclusions>
		</dependency>
        <!-- includi se vuoi usare spring-boot-starter-jetty invede di tomcat -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>
		
		
		<!-- Fornisce health endpoints: /env; /health; /mapping; etc -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
	</dependencies>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- <start-class>com.thoughtmechanix.licenses.Application</start-class> -->
		<docker.image.name>pinopisello/tmx-licensing-service</docker.image.name>
		<docker.image.tag>chapter2</docker.image.tag>
		<dockerHost>https://192.168.99.100:2376</dockerHost>
		<dockerTlsVerify>1</dockerTlsVerify>
		<dockerCertPath>/Users/glocon/.docker/machine/machines/default</dockerCertPath>
	</properties>

	<build>
		<plugins>
			<!-- spring-boot-maven-plugin esegue quando invoco mvn spring-boot:run 
				anche responsabile repackaging dell app con aggiunta BOOT-INF/classes,BOOT-INF/lib 
				,org/springframework/boot/loader per esecuzione standalone http://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html 
				
				Contiene RepackageMojo che aggiunge BOOT-INF,org/springframework/boot/loader,etc 
			    nel jar finale
			-->			
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
				<!-- Per debuggare da eclipse
					<jvmArguments>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000</jvmArguments>
                -->
				</configuration>
			</plugin>
			
			<!-- copia src/main/docker/Dockerfile e src/main/docker/run.sh in /target/dockerfile 
			     sostituendo @project.build.finalName@ in simple-service-0.0.1-SNAPSHOT.jar in /target/dockerfile/Dockerfile 
			-->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/dockerfile</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Genera doker image : mvn docker:build https://github.com/spotify/docker-maven-plugin 
				 Input: target/dockerfile/Dockerfile
				  Output:pinopisello/tmx-simple-service 
				 in usando Non agganciata alcuna fase.Occorre eseguire: mvn docker:build -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.10</version>
				<configuration>
					<imageName>${docker.image.name}:${docker.image.tag}</imageName>
					<dockerDirectory>${basedir}/target/dockerfile</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
